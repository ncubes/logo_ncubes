to specify
make "PixelsPerInch 350
make "Width :PixelsPerInch * 35.5 
make "marginPixels .25 * :PixelsPerInch
make "n_min 10
make "n_max 10
make "squish 180
make "stroke "90ee90
make "stoke_width 1.5

for [n :n_min :n_max 1][~
    make "odd MODULO :n 2
    make "s (:Width * PI) / (2 * :n)
    ;make "s :Width / sqrt(:n)
    make "n :n + :odd
    make "p :n
    ncube :n
    design :n :p :s ]
bye
end

to design :n :p :s
make "theta :squish/(:n - :odd)
genbasis :n :s
make "CanvasPixels :CanvasPixels + ( 2 * :marginPixels )
make "user_center :CanvasPixels  / 2.0
type [paper square side size inches including bleed (margin):  ]
print :CanvasPixels / :PixelsPerInch
draw
end

to genbasis :n :s
make "basis MDARRAY (list :n 2)  
for [i 1 :n 1] [mdsetitem (list :i 1) :basis  :s * cos (:i * :theta)] 
for [i 1 :n 1] [mdsetitem (list :i 2) :basis  :s * sin (:i * :theta)] 
if :odd = 1 [~
mdsetitem (list :n 1) :basis  0
mdsetitem (list :n 2) :basis  0]
make "CanvasPixels 0
for [i 1 :n 1] [make "CanvasPixels :CanvasPixels + abs mditem (list :i 1) :basis]
type [CanvasPixels is ]
print :CanvasPixels
end

to draw
make "fname "Alex3.svg
(openwrite :fname "True)
setwrite :fname
print [<?xml version="1.0" standalone="no"?>]
type [<svg width="]
type :CanvasPixels
type [" height="]
type :CanvasPixels
print [" version="1.1" xmlns="http://www.w3.org/2000/svg">]
make "CurrentPosition array 2   
for [i 1 2 1] [  setitem :i :CurrentPosition 0]

for [i 1 2 1] [~
 make "temp 0
 for [j 1 :n 1] [~
  make "index (list :j :i)
  make "temp :temp + mditem :index :basis ]
 setitem :i :CurrentPosition (- :temp / 2) ]

print [  <polyline points="]
(print (:user_center + item 1 :CurrentPosition)(:user_center + item 2 :CurrentPosition))
make "ll :llist

while [ not :ll = [] ] [~
 make "dimension dequeue "ll
 make "direction sign :dimension
 make "dimension abs :dimension
 make "itskip 1
 for [i 1 2 1] [~
  make "Current item :i :CurrentPosition
  make "index (list :dimension :i)
  make "delta mditem :index :basis
  if not equalp :delta 0 [make "itskip 0]
  setitem  :i :CurrentPosition (:Current + ( :direction * :delta )) ]
 if :itskip = 0 [~
   (print(:user_center + item 1 :CurrentPosition)( :user_center + item 2 :CurrentPosition))]
]

print ["]
type [    stroke="#]
type :stroke 
type  [" fill="none" stroke-width="]
type :stoke_width
type ["/>]
print [</svg>]

setwrite []
show :fname
show "done
close :fname
end


to ncube :k
make "k :k-2             
if :k<0 [stop]             
make "llist [2 1 -2 -1]   
make "d 2              
while [ not :k<2] [ make "d :d+2 make "k :k-2 cube :llist :d ] 
end

to cube :l :p
make "l1 :l
make "llist []
queue "llist :p
while [not :l1=[]] [queue "llist dequeue "l1]
make "l1 :l
queue "llist :p-1
while [not :l1=[]] [queue "llist dequeue "l1]
make "l1 :l
queue "llist -:p
while [not :l1=[]] [queue "llist dequeue "l1]
make "l1 :l
queue "llist 1-:p
queue "llist dequeue "l1
queue "llist :p queue "llist :p-1 queue "llist -:p queue "llist 1-:p
while [ not :l1=[] ] [
 make "x dequeue "l1 
 if (abs :x) = (abs :p-2)  [                                          
   queue "llist :p queue "llist :p-1 queue "llist -:p queue "llist 1-:p
   queue "llist :x 
   queue "llist :p queue "llist :p-1 queue "llist -:p queue "llist 1-:p]
 if not  (abs :x) = (abs :p-2) [ queue "llist :x]]
end

Make "startup [specify]