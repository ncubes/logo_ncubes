to aaa
;
; This example builds a 3D Trig based surface and animates it over time.
;
; Credit for this example goes to Wolfram Research (e.g. Mathematica)
;
; Note that if you plan to use the produced GIF it's best if you run you system
; in 8bit color mode (256 colors). However Netscape and IE View GIFs best in 16bit
; Color Mode or above.
;
; Note that Internet explorer does a MUCH better (smooth and fast) job of viewing
; the animation than Netscape once it has cached the whole movie.
;
setsc [0 0 0]
setpc [100 0 0]
cs
ht
clearpalette
perspective
; plot :stepsize :scale :framedelay
plot pi/18 100 0
MessageBox [Done] [Use Netscape or Internet Explorer to view 3DTRIG.GIF file just produced]
end

to func3d :x :y :t
; You can put any 3D function of (x,y,t) here where the output is z
; But don't forget to adjust the range in plotframe which
; assumes a trig function (i.e radians 0 to pi).
; You can also play with this function by adjusting the coefficients (the two 2's)
; that will effect the frequency of the wave in x and y.
; I wonder what a 1 will do, see if you can guess what it will look like before you
; change it.
output (RadSin (2 * :x)) * (RadSin (2 * :y)) * (RadCos :t)
end

to plot :step :scale :framedelay
; this is a flag for gifsave such that it inits the gif on the first loop
localmake "append "False
for [t 0 2*pi :step] ~
   [
   ; plot one frame and render it
   cs
   plotframe :t :step :scale
   polyview
   ; Save the frame (with delay and loop forever)
   (gifsave "3dtrig.gif :framedelay :append 0)
   make "append "True
   wait 10
   ]
end

to plotframe :t :step :scale
; plot one whole frame by looping through x and y at time t
for [x 0 pi-:step :step] ~
   [
   for [y 0 pi-:step :step] ~
      [
      plotpanel :x :y :scale :step
      ]
   ]
end

to plotpanel :x :y :scale :step
; This plots one panel by forming a polygon between the 4 adjacent grid points
; technically I should of used two triangles to guarantee the polygon is planar
setxyz :scale*(:x      ) :scale*(func3d :x       :y       :t) :scale*(:y      ) 
polystart
setxyz :scale*(:x+:step) :scale*(func3d :x+:step :y       :t) :scale*(:y      )
setxyz :scale*(:x+:step) :scale*(func3d :x+:step :y+:step :t) :scale*(:y+:step) 
setxyz :scale*(:x      ) :scale*(func3d :x       :y+:step :t) :scale*(:y+:step) 
setxyz :scale*(:x      ) :scale*(func3d :x       :y       :t) :scale*(:y      ) 
polyend
end

to zzz
ifelse YesNoBox [Welcome] [Choose YES to run example now, Choose NO Study it now.] [aaa] [edall]
end

Make "startup [zzz]
