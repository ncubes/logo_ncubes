to aaa
setsc 0
make "timeClear 0
make "oldkey 0
make "append "False
make "inputKey 0
make "n 6  
make "theta 180/:n

make "phi    []
make "sinphi []
make "cosphi []
for [i 1 :n 1][~
    queue "phi 45~
    queue "sinphi sin(item :i :phi)~
    queue "cosphi cos(item :i :phi)]


make "costheta cos :theta
make "sintheta sin :theta
make "len 1000 / SQRT :n
ncube :n    
genbasis :n 
getkeys      
draw
forever [rotate]
end

to closecube
print "\];
setwrite []
close "cube.scad
end

to cube :l :p
make "l1 :l
make "llist []
queue "llist :p
while [not :l1=[]] [queue "llist dequeue "l1]
make "l1 :l
queue "llist :p-1
while [not :l1=[]] [queue "llist dequeue "l1]
make "l1 :l
queue "llist -:p
while [not :l1=[]] [queue "llist dequeue "l1]
make "l1 :l
queue "llist 1-:p
queue "llist dequeue "l1
queue "llist :p queue "llist :p-1 queue "llist -:p queue "llist 1-:p
while [ not :l1=[] ] [
 make "x dequeue "l1 
 if (abs :x) = (abs :p-2)  [                                          
   queue "llist :p queue "llist :p-1 queue "llist -:p queue "llist 1-:p
   queue "llist :x 
   queue "llist :p queue "llist :p-1 queue "llist -:p queue "llist 1-:p]
 if not  (abs :x) = (abs :p-2) [ queue "llist :x]]
end

to draw
opencube
clearscreen
make "timeClear  :timeClear + 1
make "timeClear modulo :timeClear 20
make "red 255 - 10 * :timeClear
make "gre 10 * :timeClear
make "blu int :X
make "blu  modulo  :blu 256
 
setpencolor (list :red  :gre :blu)

make "CurrentPosition array 3   
for [i 1 3 1] [  setitem :i :CurrentPosition 0]
for [i 1 3 1] [~
 make "temp 0
 for [j 1 :n 1] [~
  make "index (list :j :i)
  make "temp :temp + mditem :index :basis ]
 setitem :i :CurrentPosition (-:temp / 2) ]
pu
ht
setxy item 1 :CurrentPosition item 2 :CurrentPosition 
filecube :CurrentPosition
pd
make "ll :llist
while [ not :ll = [] ] [~
 make "dimension dequeue "ll
 make "direction sign :dimension
 make "dimension abs :dimension
 for [i 1 3 1] [~
  make "Current item :i :CurrentPosition
  make "index (list :dimension :i)
  make "delta mditem :index :basis
  setitem  :i :CurrentPosition (:Current + ( :direction * :delta )) ]
 filecube :CurrentPosition
 make "x3 item 1 :CurrentPosition
 make "y3 item 2 :CurrentPosition
 setxy :x3 :y3  
]
closecube    
end

to filecube :scadlist
type "\[ 
foreach arraytolist :scadlist [type (se ? ",)]
type "\],
end

to genbasis :n
make "basis  MDARRAY (list :n :n)

for [vec 1 1][~
 for[coord 1 (:n-1)][~
  mdsetitem (list :vec :coord):basis product :len item :coord :cosphi]
 mdsetitem (list :vec :n) :basis :len
 for[coord 2 :n][~
  for[p 1 (:coord-1)][~
   mdsetitem (list :vec :coord):basis product mditem (list :vec :coord):basis item :p :sinphi]]]

for [vec 2 :n][~
   make "first_co :vec
   for [cnt 1 :n][~
    make "co difference :first_co  1~
    show :co show :cnt~
  
    make "co sum :co :cnt~
    make "co difference :co 1~
    make "co modulo :co :n~
    make "co sum :coord 1~
    mdsetitem (list :vec :cnt):basis mditem (list :vec :co) :basis]]

    
    
  


end

to getkeys
(keyboardon [make "inputKey keyboardvalue ] [make "inputKey 0] )
setfocus [MSWLogo Screen]
end

to go
show [thinking2]
ncube 2
make "list2 :llist
show :list2
show [thinking4]
ncube 4
make "list4 :llist
show :list4
show [thinking6]
ncube 6
make "list6 :llist
show :list6
show [thinking8]
ncube 8
make "list8 :llist
show :list8
show [thinking10]
ncube 10
make "list10 :llist
show :list10
show [thinking12]
ncube 12
make "list12 :llist
show :list12
show [thunk!]
end

to ncube :k
make "k :k-2               ; subtract off the dimension of a square
if :k<0 [stop]             ; check the parameter to be legal
make "llist [2 1 -2 -1]      ; the line list for a square
make "d 2                  ; number of dimensions in a square
while [ not :k<2] [ make "d :d+2 make "k :k-2 cube :llist :d ] 
end

to opencube
openwrite "cube.scad
setwrite  "cube.scad
type "w=\[
end

to rotate
if :inputKey = 0 [stop]
make "oldkey :inputKey
if :inputKey = 79 [sphere stop]      ; 79 is 'O' for spherical.

if :inputKey = 90 [show :basis stop] ; 90 is Z
make "senseX bitand :inputKey 15
if :senseX = 0 [genbasis :n clearscreen draw]
if :senseX = 1 [polyview (gifsave "4d3dsolidMovie.gif 2 :append 0) make "append "True]
if :senseX < 2 [stop]
if :senseX > :n [stop]
show :senseX
for [i 1 :n 1] ~
 [ ~
  make "index1 (list :i 1) ~
  make "index2 (list :i :senseX) ~
  make "X mditem :index1 :basis ~
  make "Y mditem :index2 :basis ~
  mdsetitem :index1 :basis (:costheta * :X) + (:sintheta * :Y) ~
  mdsetitem :index2 :basis (:costheta * :Y) - (:sintheta * :X) ]
draw
end

Make "append "False
Make "basis {{288.675134594813 204.124145231931 144.337567297406 102.062072615966 72.1687836487032 72.1687836487032} {[] [] [] [] [] []} {[] [] [] [] [] []} {[] [] [] [] [] []} {[] [] [] [] [] []} {[] [] [] [] [] []}}
Make "blu 255
Make "co 6
Make "coord 5
Make "cosphi [0.707106781186548 0.707106781186548 0.707106781186548 0.707106781186548 0.707106781186548 0.707106781186548]
Make "costheta 0.866025403784439
Make "currentposition {0 0 0}
Make "d 6
Make "first_co 6
Make "first_coord 6
Make "gre 10
Make "index [2 1]
Make "inputkey 0
Make "l1 []
Make "len 408.248290463863
Make "llist [6 4 2 1 -2 -1 3 2 1 -2 -1 -4 2 1 -2 -1 -3 2 4 3 -4 -3 1 4 3 -4 -3 -2 4 3 -4 -3 -1 5 4 2 1 -2 -1 3 2 1 -2 -1 -4 2 1 -2 -1 -3 2 4 3 -4 -3 1 4 3 -4 -3 -2 4 3 -4 -3 -1 -6 4 2 1 -2 -1 3 2 1 -2 -1 -4 2 1 -2 -1 -3 2 4 3 -4 -3 1 4 3 -4 -3 -2 4 3 -4 -3 -1 -5 4 6 5 -6 -5 2 1 -2 -1 3 2 1 -2 -1 6 5 -6 -5 -4 6 5 -6 -5 2 1 -2 -1 -3 2 6 5 -6 -5 4 6 5 -6 -5 3 6 5 -6 -5 -4 6 5 -6 -5 -3 1 6 5 -6 -5 4 6 5 -6 -5 3 6 5 -6 -5 -4 6 5 -6 -5 -3 -2 6 5 -6 -5 4 6 5 -6 -5 3 6 5 -6 -5 -4 6 5 -6 -5 -3 -1]
Make "n 6
Make "oldkey 0
Make "phi [45 45 45 45 45 45]
Make "red 245
Make "sinphi [0.707106781186547 0.707106781186547 0.707106781186547 0.707106781186547 0.707106781186547 0.707106781186547]
Make "sintheta 0.5
Make "temp 288.675134594813
Make "theta 30
Make "timeclear 1
Make "x -1
